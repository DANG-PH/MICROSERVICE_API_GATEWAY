// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: proto/user.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface Empty {
}

export interface User {
  id: number;
  vang: number;
  ngoc: number;
  sucManh: number;
  vangNapTuWeb: number;
  ngocNapTuWeb: number;
  x: number;
  y: number;
  mapHienTai: string;
  daVaoTaiKhoanLanDau: boolean;
  coDeTu: boolean;
  danhSachVatPhamWeb: number[];
  auth_id: number;
}

export interface RegisterRequest {
  id: number;
}

export interface RegisterResponse {
  success: boolean;
}

export interface GetUserRequest {
  id: number;
}

export interface UserResponse {
  user: User | undefined;
}

export interface SaveGameRequest {
  user: User | undefined;
  sucManhDeTu: number;
}

export interface SaveGameResponse {
  message: string;
}

export interface UsernameRequest {
  id: number;
}

export interface BalanceResponse {
  vangNapTuWeb: number;
  ngocNapTuWeb: number;
}

export interface UseBalanceRequest {
  id: number;
  amount: number;
}

export interface UpdateBalanceRequest {
  id: number;
  type: string;
  amount: number;
}

export interface AddBalanceRequest {
  id: number;
  amount: number;
}

export interface UserListResponse {
  users: User[];
}

export interface AddItemRequest {
  id: number;
  itemId: number;
}

export interface ItemListResponse {
  itemIds: number[];
}

export interface UseItemRequest {
  id: number;
  itemId: number;
}

export interface MessageResponse {
  message: string;
}

export const USER_PACKAGE_NAME = "user";

/** ===== SERVICE DEFINITION ===== */

export interface UserServiceClient {
  register(request: RegisterRequest, metadata?: Metadata): Observable<RegisterResponse>;

  getProfile(request: GetUserRequest, metadata?: Metadata): Observable<UserResponse>;

  saveGame(request: SaveGameRequest, metadata?: Metadata): Observable<SaveGameResponse>;

  getBalance(request: UsernameRequest, metadata?: Metadata): Observable<BalanceResponse>;

  useVangNapTuWeb(request: UseBalanceRequest, metadata?: Metadata): Observable<BalanceResponse>;

  useNgocNapTuWeb(request: UseBalanceRequest, metadata?: Metadata): Observable<BalanceResponse>;

  updateBalance(request: UpdateBalanceRequest, metadata?: Metadata): Observable<BalanceResponse>;

  addVangNapTuWeb(request: AddBalanceRequest, metadata?: Metadata): Observable<BalanceResponse>;

  addNgocNapTuWeb(request: AddBalanceRequest, metadata?: Metadata): Observable<BalanceResponse>;

  getTop10BySucManh(request: Empty, metadata?: Metadata): Observable<UserListResponse>;

  getTop10ByVang(request: Empty, metadata?: Metadata): Observable<UserListResponse>;

  addItemWeb(request: AddItemRequest, metadata?: Metadata): Observable<MessageResponse>;

  getItemsWeb(request: UsernameRequest, metadata?: Metadata): Observable<ItemListResponse>;

  useItemWeb(request: UseItemRequest, metadata?: Metadata): Observable<MessageResponse>;
}

/** ===== SERVICE DEFINITION ===== */

export interface UserServiceController {
  register(request: RegisterRequest, metadata?: Metadata): Observable<RegisterResponse>;

  getProfile(request: GetUserRequest, metadata?: Metadata): Observable<UserResponse>;

  saveGame(request: SaveGameRequest, metadata?: Metadata): Observable<SaveGameResponse>;

  getBalance(request: UsernameRequest, metadata?: Metadata): Observable<BalanceResponse>;

  useVangNapTuWeb(request: UseBalanceRequest, metadata?: Metadata): Observable<BalanceResponse>;

  useNgocNapTuWeb(request: UseBalanceRequest, metadata?: Metadata): Observable<BalanceResponse>;

  updateBalance(request: UpdateBalanceRequest, metadata?: Metadata): Observable<BalanceResponse>;

  addVangNapTuWeb(request: AddBalanceRequest, metadata?: Metadata): Observable<BalanceResponse>;

  addNgocNapTuWeb(request: AddBalanceRequest, metadata?: Metadata): Observable<BalanceResponse>;

  getTop10BySucManh(request: Empty, metadata?: Metadata): Observable<UserListResponse>;

  getTop10ByVang(request: Empty, metadata?: Metadata): Observable<UserListResponse>;

  addItemWeb(request: AddItemRequest, metadata?: Metadata): Observable<MessageResponse>;

  getItemsWeb(request: UsernameRequest, metadata?: Metadata): Observable<ItemListResponse>;

  useItemWeb(request: UseItemRequest, metadata?: Metadata): Observable<MessageResponse>;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "register",
      "getProfile",
      "saveGame",
      "getBalance",
      "useVangNapTuWeb",
      "useNgocNapTuWeb",
      "updateBalance",
      "addVangNapTuWeb",
      "addNgocNapTuWeb",
      "getTop10BySucManh",
      "getTop10ByVang",
      "addItemWeb",
      "getItemsWeb",
      "useItemWeb",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
